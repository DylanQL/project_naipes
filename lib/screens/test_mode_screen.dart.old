import 'dart:async';
import 'package:flutter/material.dart';
import '../models/card_model.dart';
import '../services/game_service.dart';
import '../services/database_service.dart';
import '../models/score_model.dart';
import '../widgets/card_grid.dart';

class TestModeScreen extends StatefulWidget {
  final GameService gameService;
  
  const TestModeScreen({super.key, required this.gameService});

  @override
  State<TestModeScreen> createState() => _TestModeScreenState();
}

class _TestModeScreenState extends State<TestModeScreen> {
  List<PlayingCard> deck = Deck.generateDeck();
  List<PlayingCard> guessedDeck = [];
  bool isLoading = true;
  bool isTestInProgress = false;
  bool isTestCompleted = false;
  int score = 0;
  
  // Timer variables
  Timer? _timer;
  int _secondsElapsed = 0;
  
  final TextEditingController nameController = TextEditingController();
  
  @override
  void initState() {
    super.initState();
    _loadDeck();
  }
  
  @override
  void dispose() {
    _timer?.cancel();
    nameController.dispose();
    super.dispose();
  }
  
  void _startTimer() {
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      setState(() {
        _secondsElapsed++;
      });
    });
  }
  
  void _stopTimer() {
    _timer?.cancel();
  }
  
  String get formattedTime {
    final minutes = (_secondsElapsed ~/ 60).toString().padLeft(2, '0');
    final seconds = (_secondsElapsed % 60).toString().padLeft(2, '0');
    return '$minutes:$seconds';
  }

  Future<void> _loadDeck() async {
    setState(() {
      isLoading = true;
    });
    
    await widget.gameService.loadCurrentDeck();
    
    setState(() {
      isLoading = false;
    });
  }
  
  void _startTest() {
    setState(() {
      guessedDeck = [];
      isTestInProgress = true;
      isTestCompleted = false;
      _secondsElapsed = 0;
    });
    _startTimer();
  }
  
  void _addCardToGuess(PlayingCard card) {
    if (guessedDeck.contains(card)) {
      return;
    }
    
    setState(() {
      guessedDeck.add(card);
    });
    
    // Check if all cards have been added
    if (guessedDeck.length == 52) {
      _completeTest();
    }
  }
  
  void _removeCardFromGuess(int index) {
    setState(() {
      guessedDeck.removeAt(index);
    });
  }
  
  void _completeTest() {
    _stopTimer();
    
    // Calculate score
    final score = widget.gameService.calculateScore(guessedDeck);
    
    setState(() {
      this.score = score;
      isTestInProgress = false;
      isTestCompleted = true;
    });
  }
  
  Future<void> _saveScore() async {
    if (nameController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Por favor ingresa tu nombre')),
      );
      return;
    }
    
    final scoreRecord = ScoreRecord(
      playerName: nameController.text,
      score: score,
      timeInSeconds: _secondsElapsed,
      date: DateTime.now(),
    );
    
    await DatabaseService().saveScore(scoreRecord);
    
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('¡Puntuación guardada!')),
      );
      Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Test Mode'),
        backgroundColor: Theme.of(context).colorScheme.primary,
        actions: [
          if (isTestInProgress)
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                formattedTime,
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
        ],
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : _buildContent(),
    );
  }
  
  Widget _buildContent() {
    final orientation = MediaQuery.of(context).orientation;
    final screenSize = MediaQuery.of(context).size;
    final isDesktop = screenSize.width > 1024;
    
    if (!isTestInProgress && !isTestCompleted) {
      return Center(
        child: Container(
          constraints: BoxConstraints(maxWidth: isDesktop ? 600 : 400),
          padding: EdgeInsets.all(isDesktop ? 40 : 20),
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.surface,
            borderRadius: BorderRadius.circular(24),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 20,
                offset: const Offset(0, 10),
              )
            ],
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.psychology,
                size: isDesktop ? 80 : 60,
                color: Theme.of(context).colorScheme.primary,
              ),
              const SizedBox(height: 24),
              Text(
                'Ready to test your memory?',
                style: TextStyle(
                  fontSize: isDesktop ? 28 : 22, 
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).colorScheme.onSurface,
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Try to recall all 52 cards in the correct order',
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: isDesktop ? 18 : 16,
                  color: Theme.of(context).colorScheme.onSurface.withOpacity(0.7),
                ),
              ),
              const SizedBox(height: 32),
              ElevatedButton(
                onPressed: _startTest,
                style: ElevatedButton.styleFrom(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : 32, 
                    vertical: isDesktop ? 20 : 16
                  ),
                  elevation: 4,
                  backgroundColor: Theme.of(context).colorScheme.primary,
                  foregroundColor: Colors.white,
                ),
                child: Text(
                  'Start Test', 
                  style: TextStyle(fontSize: isDesktop ? 20 : 18)
                ),
              ),
            ],
          ),
        ),
      );
    } else if (isTestInProgress) {
      // Layout changes based on device type and orientation
      if (isDesktop) {
        // Desktop optimized layout
        return _buildDesktopTestLayout();
      } else if (orientation == Orientation.landscape) {
        // Landscape layout for mobile/tablet
        return _buildLandscapeTestLayout();
      } else {
        // Portrait layout for mobile
        return _buildPortraitTestLayout();
      }
    } else {
      // Test completed result screen
      return _buildResultScreen(isDesktop);
    }
  }
  
  // Nuevo layout optimizado para pantallas de escritorio
  Widget _buildDesktopTestLayout() {
    return Row(
      children: [
        // Izquierda: Panel con cartas seleccionadas y controles
        Container(
          width: 300,
          margin: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.surface,
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 10,
                offset: const Offset(0, 5),
              )
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Theme.of(context).colorScheme.primary,
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(20),
                    topRight: Radius.circular(20),
                  ),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        const Icon(Icons.timer, color: Colors.white),
                        const SizedBox(width: 8),
                        Text(
                          formattedTime,
                          style: const TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Selected Cards: ${guessedDeck.length}/52',
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ],
                ),
              ),
              
              // Complete test button
              Padding(
                padding: const EdgeInsets.all(16),
                child: ElevatedButton.icon(
                  onPressed: guessedDeck.length == 52 ? _completeTest : null,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Theme.of(context).colorScheme.secondary,
                    foregroundColor: Theme.of(context).colorScheme.onSecondary,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    elevation: 3,
                    minimumSize: const Size(double.infinity, 50),
                  ),
                  icon: const Icon(Icons.check_circle),
                  label: const Text(
                    'Complete Test',
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  ),
                ),
              ),
              
              // Información
              if (guessedDeck.isEmpty)
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  child: Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(
                        color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
                        width: 1,
                      ),
                    ),
                    child: Column(
                      children: [
                        Row(
                          children: [
                            Icon(
                              Icons.info_outline,
                              size: 18,
                              color: Theme.of(context).colorScheme.primary,
                            ),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Text(
                                'How to use',
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  color: Theme.of(context).colorScheme.primary,
                                ),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        const Text(
                          '1. Click cards in the order you remember them',
                          style: TextStyle(fontSize: 13),
                        ),
                        const SizedBox(height: 4),
                        const Text(
                          '2. Click a selected card to remove it',
                          style: TextStyle(fontSize: 13),
                        ),
                        const SizedBox(height: 4),
                        const Text(
                          '3. Complete the test when done',
                          style: TextStyle(fontSize: 13),
                        ),
                      ],
                    ),
                  ),
                ),
              
              // Lista de cartas seleccionadas
              Expanded(
                child: guessedDeck.isEmpty
                  ? Center(
                      child: Text(
                        'No cards selected yet',
                        style: TextStyle(
                          color: Theme.of(context).colorScheme.onSurface.withOpacity(0.5),
                          fontSize: 16,
                        ),
                      ),
                    )
                  : ListView.builder(
                      padding: const EdgeInsets.all(16),
                      itemCount: guessedDeck.length,
                      itemBuilder: (context, index) {
                        final card = guessedDeck[index];
                        return Card(
                          margin: const EdgeInsets.only(bottom: 8),
                          child: ListTile(
                            contentPadding: const EdgeInsets.symmetric(
                              horizontal: 16,
                              vertical: 4,
                            ),
                            leading: CircleAvatar(
                              backgroundColor: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                              child: Text('${index + 1}'),
                            ),
                            title: Text(
                              Deck.getCardDescription(card),
                              style: const TextStyle(
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                            trailing: IconButton(
                              icon: const Icon(Icons.remove_circle_outline),
                              color: Colors.red.shade300,
                              onPressed: () => _removeCardFromGuess(index),
                            ),
                          ),
                        );
                      },
                    ),
              ),
            ],
          ),
        ),
        
        // Derecha: Selector de cartas
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // Header
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Theme.of(context).colorScheme.surface,
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.05),
                        blurRadius: 10,
                        offset: const Offset(0, 5),
                      ),
                    ],
                  ),
                  child: Text(
                    'Select Cards in Order',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Theme.of(context).colorScheme.onSurface,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
                
                const SizedBox(height: 16),
                
                // Card Grid
                Expanded(
                  child: CardGrid(
                    deck: deck,
                    onCardTap: (card) => _addCardToGuess(card),
                    forDesktop: true,
                    interactive: true,
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
  
  // Layout optimizado para modo landscape en tablets/móviles
  Widget _buildLandscapeTestLayout() {
    return Row(
      children: [
        // Izquierda: Cartas seleccionadas
        Expanded(
          flex: 3,
          child: Column(
            children: [
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      'Selected: ${guessedDeck.length}/52',
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                      ),
                    ),
                    ElevatedButton(
                      onPressed: guessedDeck.length == 52 ? _completeTest : null,
                      child: const Text('Complete Test'),
                    ),
                  ],
                ),
              ),
              Expanded(
                child: guessedDeck.isEmpty
                  ? Center(
                      child: Text(
                        'No cards selected yet',
                        style: TextStyle(
                          color: Theme.of(context).colorScheme.onSurface.withOpacity(0.5),
                        ),
                      ),
                    )
                  : GridView.builder(
                      padding: const EdgeInsets.all(8),
                      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: 4,
                        childAspectRatio: 2.5,
                        crossAxisSpacing: 8,
                        mainAxisSpacing: 8,
                      ),
                      itemCount: guessedDeck.length,
                      itemBuilder: (context, index) {
                        final card = guessedDeck[index];
                        return Card(
                          elevation: 2,
                          child: InkWell(
                            onTap: () => _removeCardFromGuess(index),
                            child: Padding(
                              padding: const EdgeInsets.all(8.0),
                              child: Row(
                                children: [
                                  CircleAvatar(
                                    radius: 12,
                                    backgroundColor: Theme.of(context).colorScheme.primary,
                                    foregroundColor: Colors.white,
                                    child: Text(
                                      '${index + 1}',
                                      style: const TextStyle(fontSize: 10),
                                    ),
                                  ),
                                  const SizedBox(width: 8),
                                  Expanded(
                                    child: Text(
                                      Deck.getCardDescription(card),
                                      style: const TextStyle(fontSize: 12),
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        );
                      },
                    ),
              ),
            ],
          ),
        ),
        
        // Derecha: Selector de cartas
        Expanded(
          flex: 5,
          child: CardGrid(
            cards: deck,
            onCardTap: (card) => _addCardToGuess(card),
            selectionMode: true,
            selectedCards: guessedDeck,
          ),
        ),
      ],
    );
  }
  
  // Layout optimizado para modo portrait en móviles
  Widget _buildPortraitTestLayout() {
    return Column(
      children: [
        // Arriba: Información y botón de completar
        Container(
          padding: const EdgeInsets.all(16.0),
          color: Theme.of(context).colorScheme.surface,
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    'Selected: ${guessedDeck.length}/52',
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              ElevatedButton(
                onPressed: guessedDeck.length == 52 ? _completeTest : null,
                child: const Text('Complete Test'),
              ),
            ],
          ),
        ),
        
        // Centro: Lista de cartas seleccionadas
        Container(
          height: 120,
          padding: const EdgeInsets.symmetric(vertical: 8),
          color: Theme.of(context).colorScheme.surface.withOpacity(0.8),
          child: guessedDeck.isEmpty
            ? const Center(
                child: Text('No cards selected yet'),
              )
            : ListView.builder(
                scrollDirection: Axis.horizontal,
                padding: const EdgeInsets.symmetric(horizontal: 8),
                itemCount: guessedDeck.length,
                itemBuilder: (context, index) {
                  final card = guessedDeck[index];
                  return Container(
                    width: 100,
                    margin: const EdgeInsets.symmetric(horizontal: 4),
                    child: Card(
                      elevation: 2,
                      child: InkWell(
                        onTap: () => _removeCardFromGuess(index),
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              CircleAvatar(
                                radius: 12,
                                backgroundColor: Theme.of(context).colorScheme.primary,
                                foregroundColor: Colors.white,
                                child: Text(
                                  '${index + 1}',
                                  style: const TextStyle(fontSize: 10),
                                ),
                              ),
                              const SizedBox(height: 4),
                              Expanded(
                                child: Text(
                                  '${Deck.getValueFullName(card.value)}\nof\n${Deck.getSuitFullName(card.suit)}',
                                  textAlign: TextAlign.center,
                                  style: const TextStyle(fontSize: 10),
                                ),
                              ),
                              const Icon(
                                Icons.remove_circle_outline,
                                size: 14,
                                color: Colors.redAccent,
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
        ),
        
        // Abajo: Grid de cartas para seleccionar
        Expanded(
          child: CardGrid(
            cards: deck,
            onCardTap: (card) => _addCardToGuess(card),
            selectionMode: true,
            selectedCards: guessedDeck,
          ),
        ),
      ],
    );
  }
  
  // Pantalla de resultados
  Widget _buildResultScreen(bool isDesktop) {
    final minutes = (_secondsElapsed ~/ 60).toString().padLeft(2, '0');
    final seconds = (_secondsElapsed % 60).toString().padLeft(2, '0');
    final accuracyPercent = ((score / 52) * 100).toStringAsFixed(1);
    final orientation = MediaQuery.of(context).orientation;
    
    // Para pantallas de escritorio, usamos un diseño más amplio
    if (isDesktop) {
      return Center(
        child: Container(
          width: 800,
          padding: const EdgeInsets.all(40),
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.surface,
            borderRadius: BorderRadius.circular(24),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 20,
                offset: const Offset(0, 10),
              )
            ],
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'Test Completed!',
                style: TextStyle(
                  fontSize: 32,
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).colorScheme.primary,
                ),
              ),
              const SizedBox(height: 32),
              
              // Resultados en tarjetas
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  _buildResultCard(
                    title: 'Score',
                    value: '$score/52',
                    icon: Icons.stars,
                    iconColor: Colors.amber,
                  ),
                  const SizedBox(width: 24),
                  _buildResultCard(
                    title: 'Accuracy',
                    value: '$accuracyPercent%',
                    icon: Icons.check_circle,
                    iconColor: Colors.green,
                  ),
                  const SizedBox(width: 24),
                  _buildResultCard(
                    title: 'Time',
                    value: '$minutes:$seconds',
                    icon: Icons.timer,
                    iconColor: Colors.blue,
                  ),
                ],
              ),
              
              const SizedBox(height: 40),
              // Campo para guardar puntaje
              Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: nameController,
                      decoration: const InputDecoration(
                        labelText: 'Your Name',
                        hintText: 'Enter your name to save score',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.person),
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  ElevatedButton.icon(
                    onPressed: _saveScore,
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                      backgroundColor: Theme.of(context).colorScheme.primary,
                      foregroundColor: Colors.white,
                    ),
                    icon: const Icon(Icons.save),
                    label: const Text('Save Score'),
                  ),
                ],
              ),
              
              const SizedBox(height: 32),
              // Botones de acción
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  OutlinedButton.icon(
                    onPressed: () => Navigator.pop(context),
                    icon: const Icon(Icons.arrow_back),
                    label: const Text('Back to Home'),
                    style: OutlinedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                    ),
                  ),
                  const SizedBox(width: 16),
                  ElevatedButton.icon(
                    onPressed: _startTest,
                    icon: const Icon(Icons.refresh),
                    label: const Text('Try Again'),
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      );
    }
    
    // Para dispositivos móviles, usamos un diseño compacto
    return Center(
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Card(
          elevation: 4,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Icon(Icons.check_circle, size: 60, color: Colors.green),
                const SizedBox(height: 16),
                Text(
                  'Test Completed!',
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Theme.of(context).colorScheme.primary,
                  ),
                ),
                const SizedBox(height: 24),
                
                // Resultados
                Text(
                  'Your score: $score/52',
                  style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                Text(
                  'Accuracy: $accuracyPercent%',
                  style: const TextStyle(fontSize: 16),
                ),
                Text(
                  'Time: $minutes:$seconds',
                  style: const TextStyle(fontSize: 16),
                ),
                
                const SizedBox(height: 24),
                // Campo para guardar puntaje
                TextField(
                  controller: nameController,
                  decoration: const InputDecoration(
                    labelText: 'Your Name',
                    hintText: 'Enter your name to save score',
                    border: OutlineInputBorder(),
                  ),
                ),
                const SizedBox(height: 16),
                ElevatedButton.icon(
                  onPressed: _saveScore,
                  style: ElevatedButton.styleFrom(
                    minimumSize: const Size(double.infinity, 0),
                    padding: const EdgeInsets.symmetric(vertical: 12),
                  ),
                  icon: const Icon(Icons.save),
                  label: const Text('Save Score'),
                ),
                
                const SizedBox(height: 16),
                // Botones de acción
                if (orientation == Orientation.portrait)
                  Column(
                    children: [
                      OutlinedButton.icon(
                        onPressed: () => Navigator.pop(context),
                        style: OutlinedButton.styleFrom(
                          minimumSize: const Size(double.infinity, 0),
                          padding: const EdgeInsets.symmetric(vertical: 12),
                        ),
                        icon: const Icon(Icons.arrow_back),
                        label: const Text('Back to Home'),
                      ),
                      const SizedBox(height: 8),
                      ElevatedButton.icon(
                        onPressed: _startTest,
                        style: ElevatedButton.styleFrom(
                          minimumSize: const Size(double.infinity, 0),
                          padding: const EdgeInsets.symmetric(vertical: 12),
                        ),
                        icon: const Icon(Icons.refresh),
                        label: const Text('Try Again'),
                      ),
                    ],
                  )
                else
                  Row(
                    children: [
                      Expanded(
                        child: OutlinedButton.icon(
                          onPressed: () => Navigator.pop(context),
                          icon: const Icon(Icons.arrow_back),
                          label: const Text('Back to Home'),
                        ),
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: _startTest,
                          icon: const Icon(Icons.refresh),
                          label: const Text('Try Again'),
                        ),
                      ),
                    ],
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
  
  // Widget para tarjetas de resultados
  Widget _buildResultCard({
    required String title,
    required String value,
    required IconData icon,
    required Color iconColor,
  }) {
    return Container(
      width: 140,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: Theme.of(context).brightness == Brightness.dark
              ? Colors.grey.shade800
              : Colors.grey.shade300,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: iconColor.withOpacity(0.1),
              shape: BoxShape.circle,
            ),
            child: Icon(
              icon,
              color: iconColor,
              size: 32,
            ),
          ),
          const SizedBox(height: 16),
          Text(
            title,
            style: TextStyle(
              fontSize: 14,
              color: Theme.of(context).colorScheme.onSurface.withOpacity(0.7),
            ),
          ),
          const SizedBox(height: 4),
          Text(
            value,
            style: const TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }
}
